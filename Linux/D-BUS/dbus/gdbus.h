/*
 * Generated by gdbus-codegen 2.56.4. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __GDBUS_H__
#define __GDBUS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.gdbus.communication */

#define TYPE_COM_GDBUS_COMMUNICATION (com_gdbus_communication_get_type ())
#define COM_GDBUS_COMMUNICATION(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_COM_GDBUS_COMMUNICATION, ComGdbusCommunication))
#define IS_COM_GDBUS_COMMUNICATION(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_COM_GDBUS_COMMUNICATION))
#define COM_GDBUS_COMMUNICATION_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_COM_GDBUS_COMMUNICATION, ComGdbusCommunicationIface))

struct _ComGdbusCommunication;
typedef struct _ComGdbusCommunication ComGdbusCommunication;
typedef struct _ComGdbusCommunicationIface ComGdbusCommunicationIface;

struct _ComGdbusCommunicationIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_set_name) (
    ComGdbusCommunication *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  void (*send_signal) (
    ComGdbusCommunication *object,
    gint arg_signal);

};

GType com_gdbus_communication_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *com_gdbus_communication_interface_info (void);
guint com_gdbus_communication_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void com_gdbus_communication_complete_set_name (
    ComGdbusCommunication *object,
    GDBusMethodInvocation *invocation,
    const gchar *response);



/* D-Bus signal emissions functions: */
void com_gdbus_communication_emit_send_signal (
    ComGdbusCommunication *object,
    gint arg_signal);



/* D-Bus method calls: */
void com_gdbus_communication_call_set_name (
    ComGdbusCommunication *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean com_gdbus_communication_call_set_name_finish (
    ComGdbusCommunication *proxy,
    gchar **out_response,
    GAsyncResult *res,
    GError **error);

gboolean com_gdbus_communication_call_set_name_sync (
    ComGdbusCommunication *proxy,
    const gchar *arg_name,
    gchar **out_response,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_COM_GDBUS_COMMUNICATION_PROXY (com_gdbus_communication_proxy_get_type ())
#define COM_GDBUS_COMMUNICATION_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_COM_GDBUS_COMMUNICATION_PROXY, ComGdbusCommunicationProxy))
#define COM_GDBUS_COMMUNICATION_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_COM_GDBUS_COMMUNICATION_PROXY, ComGdbusCommunicationProxyClass))
#define COM_GDBUS_COMMUNICATION_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_COM_GDBUS_COMMUNICATION_PROXY, ComGdbusCommunicationProxyClass))
#define IS_COM_GDBUS_COMMUNICATION_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_COM_GDBUS_COMMUNICATION_PROXY))
#define IS_COM_GDBUS_COMMUNICATION_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_COM_GDBUS_COMMUNICATION_PROXY))

typedef struct _ComGdbusCommunicationProxy ComGdbusCommunicationProxy;
typedef struct _ComGdbusCommunicationProxyClass ComGdbusCommunicationProxyClass;
typedef struct _ComGdbusCommunicationProxyPrivate ComGdbusCommunicationProxyPrivate;

struct _ComGdbusCommunicationProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ComGdbusCommunicationProxyPrivate *priv;
};

struct _ComGdbusCommunicationProxyClass
{
  GDBusProxyClass parent_class;
};

GType com_gdbus_communication_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ComGdbusCommunicationProxy, g_object_unref)
#endif

void com_gdbus_communication_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ComGdbusCommunication *com_gdbus_communication_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
ComGdbusCommunication *com_gdbus_communication_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void com_gdbus_communication_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ComGdbusCommunication *com_gdbus_communication_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
ComGdbusCommunication *com_gdbus_communication_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_COM_GDBUS_COMMUNICATION_SKELETON (com_gdbus_communication_skeleton_get_type ())
#define COM_GDBUS_COMMUNICATION_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_COM_GDBUS_COMMUNICATION_SKELETON, ComGdbusCommunicationSkeleton))
#define COM_GDBUS_COMMUNICATION_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_COM_GDBUS_COMMUNICATION_SKELETON, ComGdbusCommunicationSkeletonClass))
#define COM_GDBUS_COMMUNICATION_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_COM_GDBUS_COMMUNICATION_SKELETON, ComGdbusCommunicationSkeletonClass))
#define IS_COM_GDBUS_COMMUNICATION_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_COM_GDBUS_COMMUNICATION_SKELETON))
#define IS_COM_GDBUS_COMMUNICATION_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_COM_GDBUS_COMMUNICATION_SKELETON))

typedef struct _ComGdbusCommunicationSkeleton ComGdbusCommunicationSkeleton;
typedef struct _ComGdbusCommunicationSkeletonClass ComGdbusCommunicationSkeletonClass;
typedef struct _ComGdbusCommunicationSkeletonPrivate ComGdbusCommunicationSkeletonPrivate;

struct _ComGdbusCommunicationSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ComGdbusCommunicationSkeletonPrivate *priv;
};

struct _ComGdbusCommunicationSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType com_gdbus_communication_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ComGdbusCommunicationSkeleton, g_object_unref)
#endif

ComGdbusCommunication *com_gdbus_communication_skeleton_new (void);


G_END_DECLS

#endif /* __GDBUS_H__ */
